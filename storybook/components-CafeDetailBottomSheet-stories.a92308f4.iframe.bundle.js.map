{"version":3,"file":"components-CafeDetailBottomSheet-stories.a92308f4.iframe.bundle.js","mappings":";;;AAyEA;;;AAGA;AAGA;;AAEA;;AAEA;;;;;;;;;;;ACHA;;;AAGA;;;AAGA;;;;;AAOA;AACA;AAGA;AACA;;AAIA;;;AAGA;AAGA;;AAEA;;AAIA;;AAEA;;AAIA;;AAEA;;AAIA;;;AAGA;AAGA;;;;;AAKA;;;AAKA;;;;AAMA;AACA;AAOA;;;;ACjIA;AAOA;;;;;;;;AA6BA;;;AAGA;;;;;;AAQA;;;;AAMA;;;;;;;AASA;;;AAKA;AACA;AAGA;AACA;;AAEA","sources":["webpack://yozm-cafe/./src/components/OpeningHoursDetail.tsx","webpack://yozm-cafe/./src/components/CafeDetailBottomSheet.tsx","webpack://yozm-cafe/./src/components/CafeMenuMiniList.tsx"],"sourcesContent":["import { BsClock } from 'react-icons/bs';\nimport { styled } from 'styled-components';\nimport type { OpeningHour, OpeningHourDay } from '../types';\n\nconst DAY_MAPPER: Record<OpeningHourDay, string> = {\n  MONDAY: '월',\n  TUESDAY: '화',\n  WEDNESDAY: '수',\n  THURSDAY: '목',\n  FRIDAY: '금',\n  SATURDAY: '토',\n  SUNDAY: '일',\n};\n\ntype OpeningHoursDetailProps = {\n  openingHours: OpeningHour[];\n};\n\nconst OpeningHoursDetail = (props: OpeningHoursDetailProps) => {\n  const { openingHours } = props;\n\n  const getCurrentTime = (): string => {\n    const now = new Date();\n    const hours = now.getHours().toString().padStart(2, '0');\n    const minutes = now.getMinutes().toString().padStart(2, '0');\n\n    return `${hours}:${minutes}`;\n  };\n\n  const today = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toUpperCase();\n  const todayOpeningHour = openingHours.find((openingHour) => openingHour.day === today) ?? null;\n\n  const isOpenedToday = (): boolean => {\n    const currentTime = getCurrentTime();\n\n    if (!todayOpeningHour || !todayOpeningHour.opened) return false;\n\n    return (\n      today === todayOpeningHour.day && todayOpeningHour.open <= currentTime && currentTime <= todayOpeningHour.close\n    );\n  };\n\n  return (\n    <Container aria-live=\"polite\">\n      <SummaryDetails>\n        <BsClock />\n        <h3>{isOpenedToday() ? '영업중' : '영업 종료'}</h3>\n        <Summary>\n          {todayOpeningHour?.opened\n            ? `${DAY_MAPPER[todayOpeningHour.day]} ${todayOpeningHour.open} - ${todayOpeningHour.close}`\n            : '휴무'}\n        </Summary>\n      </SummaryDetails>\n      <Details>\n        {openingHours.map((openingHour) => (\n          <li key={openingHour.day}>\n            {DAY_MAPPER[openingHour.day]} {openingHour.opened ? `${openingHour.open} - ${openingHour.close}` : '휴무'}\n          </li>\n        ))}\n      </Details>\n    </Container>\n  );\n};\n\nexport default OpeningHoursDetail;\n\nconst Container = styled.div``;\n\nconst Summary = styled.h3``;\n\nconst Details = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.space[1]};\n  align-items: flex-end;\n\n  color: ${({ theme }) => theme.color.gray};\n`;\n\nconst SummaryDetails = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.space[2]};\n  align-items: center;\n  margin-bottom: ${({ theme }) => theme.space[1]};\n`;\n","import { Suspense, useEffect } from 'react';\nimport { BsBoxArrowUpRight, BsGeoAlt, BsX } from 'react-icons/bs';\nimport { styled } from 'styled-components';\nimport useCafeMenus from '../hooks/useCafeMenus';\nimport useScrollSnapGuard from '../hooks/useScrollSnapGuard';\nimport type { Theme } from '../styles/theme';\nimport type { Cafe } from '../types';\nimport CafeMenuMiniList from './CafeMenuMiniList';\nimport OpeningHoursDetail from './OpeningHoursDetail';\n\ntype CafeDetailBottomSheetProps = {\n  cafe: Cafe;\n  onClose: () => void;\n};\n\nconst CafeDetailBottomSheet = (props: CafeDetailBottomSheetProps) => {\n  const { cafe, onClose } = props;\n  const scrollSnapGuardHandlers = useScrollSnapGuard();\n\n  useEffect(() => {\n    document.addEventListener('click', onClose);\n\n    return () => document.removeEventListener('click', onClose);\n  }, [onClose]);\n\n  const handlePreventClickPropagation: React.MouseEventHandler<HTMLDivElement> = (event) => {\n    event.stopPropagation();\n  };\n\n  return (\n    <Container onClick={handlePreventClickPropagation} role=\"dialog\" aria-modal=\"true\" {...scrollSnapGuardHandlers}>\n      <CloseButton>\n        <CloseIcon onClick={onClose} />\n      </CloseButton>\n      <Title>{cafe.name}</Title>\n      <Spacer $size={'4'} />\n      <Suspense>\n        <CafeMenu cafeId={cafe.id} />\n      </Suspense>\n      <InfoContainer>\n        <LocationDetail>\n          <BsGeoAlt />\n          <a href={cafe.detail.mapUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            <LocationName>\n              {cafe.address} <BsBoxArrowUpRight />\n            </LocationName>\n          </a>\n        </LocationDetail>\n        <OpeningHoursDetails>\n          <OpeningHoursDetail openingHours={cafe.detail.openingHours} />\n        </OpeningHoursDetails>\n        {/* <Info>\n          <BsTelephone />\n          <h3>000-000-000</h3>\n        </Info> */}\n      </InfoContainer>\n      <Spacer $size={'6'} />\n      <Content>\n        {cafe.detail.description.split('\\n').map((paragraph, index) => (\n          <p key={index}>{paragraph}</p>\n        ))}\n      </Content>\n\n      <MoreContentHintGradient />\n    </Container>\n  );\n};\n\nexport default CafeDetailBottomSheet;\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0;\n\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  height: 450px;\n  padding: ${({ theme }) => theme.space[4]};\n  padding-bottom: 0;\n\n  color: ${({ theme }) => theme.color.text.primary};\n  text-shadow: none;\n\n  background: ${({ theme }) => theme.color.white};\n\n  & svg {\n    filter: none !important;\n  }\n`;\n\nconst Spacer = styled.div<{ $size: keyof Theme['space'] }>`\n  min-height: ${({ theme, $size }) => theme.space[$size]};\n`;\n\nconst Title = styled.h1`\n  font-size: ${({ theme }) => theme.fontSize['3xl']};\n  font-weight: bolder;\n`;\n\nconst InfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.space[2]};\n`;\n\nconst OpeningHoursDetails = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.space[2]};\n  align-items: flex-start;\n`;\n\nconst LocationDetail = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.space[2]};\n  align-items: center;\n`;\n\nconst LocationName = styled.h3`\n  display: flex;\n  gap: ${({ theme }) => theme.space[1]};\n  align-items: center;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.space[2]};\n`;\n\nconst MoreContentHintGradient = styled.div`\n  position: sticky;\n  bottom: 0;\n\n  width: 100%;\n  min-height: ${({ theme }) => theme.space[16]};\n\n  background: linear-gradient(transparent, white);\n`;\n\nconst CloseButton = styled.button`\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n`;\n\nconst CloseIcon = styled(BsX)`\n  font-size: ${({ theme }) => theme.fontSize['2xl']};\n`;\n\ntype CafeMenuProps = {\n  cafeId: Cafe['id'];\n};\n\nconst CafeMenu = (props: CafeMenuProps) => {\n  const { cafeId } = props;\n  const {\n    data: { menus },\n  } = useCafeMenus(cafeId);\n\n  const recommendedMenus = menus.filter((menuItem) => menuItem.isRecommended);\n\n  return (\n    recommendedMenus.length > 0 && (\n      <>\n        <CafeMenuMiniList menus={recommendedMenus} />\n        <Spacer $size={'8'} />\n      </>\n    )\n  );\n};\n","import { PiCoffeeFill } from 'react-icons/pi';\nimport { styled } from 'styled-components';\nimport type { CafeMenuItem } from '../types';\nimport Resource from '../utils/Resource';\n\ntype CafeMenuMiniListProps = {\n  menus: CafeMenuItem[];\n};\n\nconst CafeMenuMiniList = (props: CafeMenuMiniListProps) => {\n  const { menus } = props;\n\n  return (\n    <MenuList>\n      {menus.map((menuItem) => (\n        <MenuListItem key={menuItem.id} menuItem={menuItem} />\n      ))}\n    </MenuList>\n  );\n};\n\nexport default CafeMenuMiniList;\n\nconst MenuList = styled.ul`\n  overflow-y: auto;\n  display: flex;\n  flex-shrink: 0;\n  gap: ${({ theme }) => theme.space[4]};\n`;\n\ntype MenuListItemProps = {\n  menuItem: CafeMenuItem;\n};\n\nconst MenuListItem = (props: MenuListItemProps) => {\n  const { menuItem } = props;\n\n  return (\n    <MenuListItemContainer>\n      <MenuItemImageContainer>\n        {menuItem.imageUrl ? (\n          <MenuItemImage src={Resource.getImageUrl({ size: '100', filename: menuItem.imageUrl })} />\n        ) : (\n          <MenuItemImageAlt>\n            <MenuItemImageAltIcon />\n          </MenuItemImageAlt>\n        )}\n      </MenuItemImageContainer>\n      <MenuItemName>{menuItem.name}</MenuItemName>\n    </MenuListItemContainer>\n  );\n};\n\nconst MenuListItemContainer = styled.li`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  align-items: center;\n\n  width: 70px;\n  height: 100%;\n`;\n\nconst MenuItemImageContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: ${({ theme }) => theme.space[2]};\n\n  & > * {\n    aspect-ratio: 1 / 1;\n    width: 100%;\n  }\n`;\n\nconst MenuItemImage = styled.img`\n  display: block;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nconst MenuItemImageAlt = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background: #dedede;\n  border-radius: 50%;\n`;\n\nconst MenuItemImageAltIcon = styled(PiCoffeeFill)`\n  width: 50%;\n  height: 50%;\n`;\n\nconst MenuItemName = styled.div`\n  font-size: ${({ theme }) => theme.fontSize.xs};\n`;\n\nconst Divider = styled.hr`\n  margin: ${({ theme }) => theme.space[2]} ${({ theme }) => theme.space[1]};\n  border: none;\n  border-left: 1px solid ${({ theme }) => theme.color.gray};\n`;\n"],"names":[],"sourceRoot":""}