{"version":3,"file":"components-LoginModal-stories.4a1506d1.iframe.bundle.js","mappings":";;;;;;AA2BA;;;AAGA;;;AAGA;AAGA;;;;;;;;;;;;;;;;;;AC6BA;AAGA;;;;;;;;;AASA;;;;AAMA;;;;;AAKA;;AAEA;AAGA;;AAIA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;;;;;;;AAOA;;;;;;;;AAQA;;AAIA;;;;;;;ACxGA;AACA","sources":["webpack://yozm-cafe/./src/components/LoginButton.tsx","webpack://yozm-cafe/./src/components/LoginModal.tsx","webpack://yozm-cafe/./src/components/Logo.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes } from 'react';\nimport { styled } from 'styled-components';\nimport type { Theme } from '../styles/theme';\nimport theme from '../styles/theme';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  $color: keyof Theme['color'];\n};\n\nconst LoginButton = (props: ButtonProps) => {\n  const { children, ...rest } = props;\n\n  return (\n    <Container {...rest}>\n      <ButtonContent>{children}</ButtonContent>\n    </Container>\n  );\n};\n\nexport default LoginButton;\n\nconst Container = styled.button<ButtonProps>`\n  cursor: pointer;\n\n  width: 44px;\n  height: 44px;\n\n  font-size: ${({ theme }) => theme.fontSize.base};\n  font-weight: 500;\n\n  background-color: ${(props) => theme.color[props.$color]};\n  border: none;\n  border-radius: 4px;\n  box-shadow: ${({ theme }) => theme.shadow[1]};\n`;\n\nconst ButtonContent = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import type React from 'react';\nimport { CgClose } from 'react-icons/cg';\nimport { styled } from 'styled-components';\nimport useAuthUrls from '../hooks/useAuthUrls';\nimport type { Theme } from '../styles/theme';\nimport LoginButton from './LoginButton';\nimport Logo from './Logo';\n\nconst brandColors: Record<string, keyof Theme['color']> = {\n  kakao: 'yellow',\n  google: 'white',\n};\n\ntype ModalProps = {\n  onClose: () => void;\n};\n\nconst LoginModal = (props: ModalProps) => {\n  const { onClose } = props;\n  const { data: urls } = useAuthUrls();\n\n  const handleContentClick: React.MouseEventHandler = (event) => {\n    // 클릭 이벤트가 ModalContainer까지 전파되지 않도록 막습니다.\n    event.stopPropagation();\n  };\n\n  return (\n    <ModalContainer onClick={onClose}>\n      <ModalContent onClick={handleContentClick}>\n        <CloseButtonContainer aria-label=\"닫기 버튼\" role=\"dialog\" aria-modal=\"true\" aria-hidden=\"true\">\n          <CloseIcon onClick={onClose} />\n        </CloseButtonContainer>\n        <Logo fontSize=\"5xl\" />\n        <LoginTitle>간편 로그인</LoginTitle>\n        <ButtonContainer>\n          {urls.map(({ provider, authorizationUrl }) => (\n            <a href={authorizationUrl} key={provider}>\n              <LoginButton $color={brandColors[provider] ?? 'white'} aria-label={`${provider} 로그인`}>\n                <img src={`/assets/${provider}.svg`} alt={`${provider} 로고`} />\n              </LoginButton>\n            </a>\n          ))}\n        </ButtonContainer>\n      </ModalContent>\n    </ModalContainer>\n  );\n};\n\nexport default LoginModal;\n\nconst ModalContainer = styled.div`\n  position: fixed;\n  z-index: 999;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  height: 100%;\n\n  background: ${({ theme }) => theme.color.background.secondary};\n`;\n\nconst ModalContent = styled.div`\n  cursor: default;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  width: 350px;\n  padding: ${({ theme }) => theme.space['5']};\n\n  background-color: white;\n  border-radius: 8px;\n`;\n\nconst CloseButtonContainer = styled.button`\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  margin-bottom: ${({ theme }) => theme.space['2.5']};\n\n  color: ${({ theme }) => theme.color.gray};\n`;\n\nconst CloseIcon = styled(CgClose)`\n  cursor: pointer;\n`;\n\nconst LoginTitle = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.space['1.5']};\n  align-items: center;\n\n  width: 100%;\n  margin-top: ${({ theme }) => theme.space['2.5']};\n  margin-bottom: ${({ theme }) => theme.space['4']};\n\n  font-size: ${({ theme }) => theme.fontSize.xs};\n  color: ${({ theme }) => theme.color.gray};\n\n  /* ::before 스타일링 */\n  &::before {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: ${({ theme }) => theme.color.gray};\n  }\n\n  /* ::after 스타일링 */\n  &::after {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: ${({ theme }) => theme.color.gray};\n  }\n`;\n\nconst ButtonContainer = styled.section`\n  display: flex;\n  justify-content: space-evenly;\n  width: 100%;\n`;\n","import { styled } from 'styled-components';\nimport theme from '../styles/theme';\n\ntype LogoProps = {\n  fontSize: keyof typeof theme.fontSize;\n};\n\nconst Logo = (props: LogoProps) => {\n  const { fontSize } = props;\n\n  return (\n    <Container fontSize={fontSize} aria-label=\"요즘카페 로고\">\n      요즘카페\n    </Container>\n  );\n};\n\nexport default Logo;\n\nconst Container = styled.h1<LogoProps>`\n  cursor: pointer;\n  font-family: 'BMJUA', sans-serif;\n  font-size: ${(props) => theme.fontSize[props.fontSize]};\n  color: ${({ theme }) => theme.color.primary};\n`;\n"],"names":[],"sourceRoot":""}