plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //DB
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
    testImplementation 'org.testcontainers:mysql'
    implementation 'org.hibernate:hibernate-spatial:6.2.5.Final'

    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //S3
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    implementation 'com.amazonaws:aws-java-sdk-s3'

    //Rest Assured
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    //Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'com.epages:restdocs-api-spec-restassured:0.18.2'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'

    //Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    //Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    //QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

def generatedQueryDsl = 'build/generated/querydsl'

sourceSets {
    main.java.srcDirs += [generatedQueryDsl]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generatedQueryDsl))
}

clean.doLast {
    file(generatedQueryDsl).deleteDir()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

openapi3 {
    server = 'http://localhost:8080'
    title = '요즘카페-API'
    description = '요즘카페 API 목록입니다.'
    version = '1.0.0'
    format = 'yaml'
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}
